{"version":3,"file":"formik.js","sources":["../src/utils.ts","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/withFormik.tsx","../src/FieldArray.tsx","../src/FastField.tsx"],"sourcesContent":["import * as React from 'react';\nimport toPath from 'lodash.topath';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * Deeply get a value from an object via it's path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path.\n * @see https://github.com/developit/linkstate\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = {};\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  resVal[pathArray[i]] = value;\n  return { ...obj, ...res };\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): boolean => typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): boolean =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): boolean =>\n  isObject(value) && isFunction(value.then);\n","import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport warning from 'warning';\nimport {\n  isFunction,\n  isPromise,\n  isString,\n  isNaN,\n  isEmptyChildren,\n  setIn,\n  setNestedObjectValues,\n} from './utils';\nimport ReactDOM from 'react-dom';\n\nexport type Extends<A, B> = A extends B ? true : false;\nexport type Tree<Children, Leaf> = {\n  [K in keyof Children]?: Children[K] extends object\n    ? false extends Extends<Children[K], object> ? any : Tree<Children[K], Leaf>\n    : Leaf\n};\n\n/**\n * Values of fields in the form\n */\nexport interface FormikValues {\n  [field: string]: any;\n}\n\n/**\n * An object containing error messages whose keys correspond to FormikValues.\n */\nexport type FormikErrors<Values> = Tree<Values, string>;\n\n/**\n * An object containing touched state of the form whose keys correspond to FormikValues.\n */\nexport type FormikTouched<Values> = Tree<Values, boolean>;\n\n/**\n * Formik state tree\n */\nexport interface FormikState<Values> {\n  /** Form values */\n  values: Values;\n  /**\n   * Top level error, in case you need it\n   * @deprecated since 0.8.0\n   */\n  error?: any;\n  /** map of field names to specific error for that field */\n  errors: FormikErrors<Values>;\n  /** map of field names to whether the field has been touched */\n  touched: FormikTouched<Values>;\n  /** whether the form is currently submitting */\n  isSubmitting: boolean;\n  /** Top level status state, in case you need it */\n  status?: any;\n  /** Number of times user tried to submit the form */\n  submitCount: number;\n}\n\n/**\n * Formik computed properties. These are read-only.\n */\nexport interface FormikComputedProps<Values> {\n  /** True if any input has been touched. False otherwise. */\n  readonly dirty: boolean;\n  /** Result of isInitiallyValid on mount, then whether true values pass validation. */\n  readonly isValid: boolean;\n  /** initialValues */\n  readonly initialValues: Values;\n}\n\n/**\n * Formik state helpers\n */\nexport interface FormikActions<Values> {\n  /** Manually set top level status. */\n  setStatus(status?: any): void;\n  /**\n   * Manually set top level error\n   * @deprecated since 0.8.0\n   */\n  setError(e: any): void;\n  /** Manually set errors object */\n  setErrors(errors: FormikErrors<Values>): void;\n  /** Manually set isSubmitting */\n  setSubmitting(isSubmitting: boolean): void;\n  /** Manually set touched object */\n  setTouched(touched: FormikTouched<Values>): void;\n  /** Manually set values object  */\n  setValues(values: Values): void;\n  /** Set value of form field directly */\n  setFieldValue(\n    field: keyof Values,\n    value: any,\n    shouldValidate?: boolean\n  ): void;\n  setFieldValue(field: string, value: any, shouldValidate?: boolean): void;\n  /** Set error message of a form field directly */\n  setFieldError(field: keyof Values, message: string): void;\n  setFieldError(field: string, message: string): void;\n  /** Set whether field has been touched directly */\n  setFieldTouched(\n    field: keyof Values,\n    isTouched?: boolean,\n    shouldValidate?: boolean\n  ): void;\n  setFieldTouched(\n    field: string,\n    isTouched?: boolean,\n    shouldValidate?: boolean\n  ): void;\n  /** Validate form values */\n  validateForm(values?: any): void;\n  /** Reset form */\n  resetForm(nextValues?: any): void;\n  /** Submit the form imperatively */\n  submitForm(): void;\n  /** Set Formik state, careful! */\n  setFormikState<K extends keyof FormikState<Values>>(\n    f: (\n      prevState: Readonly<FormikState<Values>>,\n      props: any\n    ) => Pick<FormikState<Values>, K>,\n    callback?: () => any\n  ): void;\n}\n\n/** Overloded methods / types */\nexport interface FormikActions<Values> {\n  /** Set value of form field directly */\n  setFieldValue(field: string, value: any): void;\n  /** Set error message of a form field directly */\n  setFieldError(field: string, message: string): void;\n  /** Set whether field has been touched directly */\n  setFieldTouched(field: string, isTouched?: boolean): void;\n  /** Set Formik state, careful! */\n  setFormikState<K extends keyof FormikState<Values>>(\n    state: Pick<FormikState<Values>, K>,\n    callback?: () => any\n  ): void;\n}\n\n/**\n * Formik form event handlers\n */\nexport interface FormikHandlers {\n  /** Form submit handler */\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n  /** Reset form event handler  */\n  handleReset: () => void;\n  /** Classic React blur handler, keyed by input name */\n  handleBlur(e: any): void;\n  /** Preact-like linkState. Will return a handleBlur function. */\n  handleBlur(field: string): ((e: any) => void);\n  /** Classic React change handler, keyed by input name */\n  handleChange(e: React.ChangeEvent<any>): void;\n  /** Preact-like linkState. Will return a handleChange function.  */\n  handleChange(field: string): ((e: React.ChangeEvent<any>) => void);\n}\n\n/**\n * Base formik configuration/props shared between the HoC and Component.\n */\nexport interface FormikSharedConfig {\n  /** Tells Formik to validate the form on each input's onChange event */\n  validateOnChange?: boolean;\n  /** Tells Formik to validate the form on each input's onBlur event */\n  validateOnBlur?: boolean;\n  /** Tell Formik if initial form values are valid or not on first render */\n  isInitialValid?: boolean | ((props: object) => boolean | undefined);\n  /** Should Formik reset the form when new initialValues change */\n  enableReinitialize?: boolean;\n}\n\n/**\n * <Formik /> props\n */\nexport interface FormikConfig<Values> extends FormikSharedConfig {\n  /**\n   * Initial values of the form\n   */\n  initialValues: Values;\n\n  /**\n   * Reset handler\n   */\n  onReset?: (values: Values, formikActions: FormikActions<Values>) => void;\n\n  /**\n   * Submission handler\n   */\n  onSubmit: (values: Values, formikActions: FormikActions<Values>) => void;\n\n  /**\n   * Form component to render\n   */\n  component?: React.ComponentType<FormikProps<Values>> | React.ReactNode;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FormikProps<Values>) => React.ReactNode);\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | (() => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: ((\n    values: Values\n  ) => void | object | Promise<FormikErrors<Values>>);\n\n  /**\n   * React children or child render callback\n   */\n  children?:\n    | ((props: FormikProps<Values>) => React.ReactNode)\n    | React.ReactNode;\n}\n\n/**\n * State, handlers, and helpers made available to form component or render prop\n * of <Formik/>.\n */\nexport type FormikProps<Values> = FormikState<Values> &\n  FormikActions<Values> &\n  FormikHandlers &\n  FormikComputedProps<Values>;\n\nexport class Formik<ExtraProps = {}, Values = object> extends React.Component<\n  FormikConfig<Values> & ExtraProps,\n  FormikState<any>\n> {\n  static defaultProps = {\n    validateOnChange: true,\n    validateOnBlur: true,\n    isInitialValid: false,\n    enableReinitialize: false,\n  };\n\n  static propTypes = {\n    validateOnChange: PropTypes.bool,\n    validateOnBlur: PropTypes.bool,\n    isInitialValid: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    initialValues: PropTypes.object,\n    onReset: PropTypes.func,\n    onSubmit: PropTypes.func.isRequired,\n    validationSchema: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    validate: PropTypes.func,\n    component: PropTypes.func,\n    render: PropTypes.func,\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    enableReinitialize: PropTypes.bool,\n  };\n\n  static childContextTypes = {\n    formik: PropTypes.object,\n  };\n\n  initialValues: Values;\n\n  hcCache: {\n    [key: string]: (e: string | React.ChangeEvent<any>) => void;\n  } = {};\n  hbCache: {\n    [key: string]: (e: any) => void;\n  } = {};\n  fields: { [field: string]: (nextValues?: any) => void };\n\n  getChildContext() {\n    return {\n      formik: {\n        ...this.getFormikBag(),\n        validationSchema: this.props.validationSchema,\n        validate: this.props.validate,\n      },\n    };\n  }\n\n  constructor(props: FormikConfig<Values> & ExtraProps) {\n    super(props);\n    this.state = {\n      values: props.initialValues || ({} as any),\n      errors: {},\n      touched: {},\n      isSubmitting: false,\n      submitCount: 0,\n    };\n    this.fields = {};\n    this.initialValues = props.initialValues || ({} as any);\n  }\n\n  registerField = (name: string, resetFn: (nextValues?: any) => void) => {\n    this.fields[name] = resetFn;\n  };\n\n  unregisterField = (name: string) => {\n    delete this.fields[name];\n  };\n\n  componentWillReceiveProps(\n    nextProps: Readonly<FormikConfig<Values> & ExtraProps>\n  ) {\n    // If the initialValues change, reset the form\n    if (\n      this.props.enableReinitialize &&\n      !isEqual(nextProps.initialValues, this.props.initialValues)\n    ) {\n      this.initialValues = nextProps.initialValues;\n      this.resetForm(nextProps.initialValues);\n    }\n  }\n\n  componentWillMount() {\n    warning(\n      !(this.props.component && this.props.render),\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\n    );\n\n    warning(\n      !(\n        this.props.component &&\n        this.props.children &&\n        !isEmptyChildren(this.props.children)\n      ),\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n\n    warning(\n      !(\n        this.props.render &&\n        this.props.children &&\n        !isEmptyChildren(this.props.children)\n      ),\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n  }\n\n  setErrors = (errors: FormikErrors<Values>) => {\n    this.setState({ errors });\n  };\n\n  setTouched = (touched: FormikTouched<Values>) => {\n    this.setState({ touched }, () => {\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    });\n  };\n\n  setValues = (values: FormikValues) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      this.setState({ values });\n\n      if (this.props.validateOnChange) {\n        this.runValidations(values);\n      }\n    });\n  };\n\n  setStatus = (status?: any) => {\n    this.setState({ status });\n  };\n\n  setError = (error: any) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\n      );\n    }\n    this.setState({ error });\n  };\n\n  setSubmitting = (isSubmitting: boolean) => {\n    this.setState({ isSubmitting });\n  };\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  runValidationSchema = (values: FormikValues, onSuccess?: Function) => {\n    const { validationSchema } = this.props;\n    const schema = isFunction(validationSchema)\n      ? validationSchema()\n      : validationSchema;\n    validateYupSchema(values, schema).then(\n      () => {\n        this.setState({ errors: {} });\n        if (onSuccess) {\n          onSuccess();\n        }\n      },\n      (err: any) =>\n        this.setState({ errors: yupToFormErrors(err), isSubmitting: false })\n    );\n  };\n\n  /**\n   * Run validations and update state accordingly\n   */\n  runValidations = (values: FormikValues = this.state.values) => {\n    if (this.props.validationSchema) {\n      this.runValidationSchema(values);\n    }\n\n    if (this.props.validate) {\n      const maybePromisedErrors = (this.props.validate as any)(values);\n      if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            this.setState({ errors: {} });\n          },\n          errors => this.setState({ errors, isSubmitting: false })\n        );\n      } else {\n        this.setErrors(maybePromisedErrors as FormikErrors<Values>);\n      }\n    }\n  };\n\n  handleChange = (\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n    // @todo someone make this less disgusting.\n    //\n    // executeChange is the core of handleChange, we'll use it cache change\n    // handlers like Preact's linkState.\n    const executeChange = (\n      eventOrTextValue: string | React.ChangeEvent<any>,\n      maybePath?: string\n    ) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n        } = (eventOrTextValue as React.ChangeEvent<any>).target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) ? checked : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        this.setState(prevState => ({\n          ...prevState,\n          values: setIn(prevState.values, field!, val),\n        }));\n\n        if (this.props.validateOnChange) {\n          this.runValidations(setIn(this.state.values, field, val));\n        }\n      } else {\n        console.warn(\n          'Formik could not determine which field to update based on your input and usage of `handleChange`'\n        );\n      }\n    };\n\n    // Actually execute logic above....\n    // cache these handlers by key like Preact's linkState does for perf boost\n    if (isString(eventOrPath as string)) {\n      return isFunction(this.hcCache[eventOrPath as string])\n        ? this.hcCache[eventOrPath as string] // return the cached handled\n        : (this.hcCache[eventOrPath as string] = (\n            // make a new one\n            event: React.ChangeEvent<any> | string\n          ) =>\n            executeChange(\n              event /* string or event, does not matter */,\n              eventOrPath as string /* this is path to the field now */\n            ));\n    } else {\n      executeChange(eventOrPath);\n    }\n  };\n\n  setFieldValue = (\n    field: string,\n    value: any,\n    shouldValidate: boolean = true\n  ) => {\n    // Set form field by name\n    const valuesState = (prevState: any) => ({\n      values: setIn(prevState.values, field, value),\n    });\n\n    ReactDOM.unstable_batchedUpdates(() => {\n      this.setState(valuesState);\n\n      if (this.props.validateOnChange && shouldValidate) {\n        this.runValidations(valuesState(this.state).values);\n      }\n    });\n  };\n\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n    this.submitForm();\n  };\n\n  submitForm = () => {\n    // Recursively set all values to `true`.\n    this.setState(prevState => ({\n      touched: setNestedObjectValues<FormikTouched<Values>>(\n        prevState.values,\n        true\n      ),\n      isSubmitting: true,\n      submitCount: prevState.submitCount + 1,\n    }));\n\n    if (this.props.validate) {\n      const maybePromisedErrors =\n        (this.props.validate as any)(this.state.values) || {};\n      if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            this.setState({ errors: {} });\n            this.executeSubmit();\n          },\n          errors => this.setState({ errors, isSubmitting: false })\n        );\n        return;\n      } else {\n        const isValid = Object.keys(maybePromisedErrors).length === 0;\n        this.setState({\n          errors: maybePromisedErrors as FormikErrors<Values>,\n          isSubmitting: isValid,\n        });\n\n        // only submit if there are no errors\n        if (isValid) {\n          this.executeSubmit();\n        }\n      }\n    } else if (this.props.validationSchema) {\n      this.runValidationSchema(this.state.values, this.executeSubmit);\n    } else {\n      this.executeSubmit();\n    }\n  };\n\n  executeSubmit = () => {\n    this.props.onSubmit(this.state.values, this.getFormikActions());\n  };\n\n  handleBlur = (eventOrString: any): void | ((e: any) => void) => {\n    const executeBlur = (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      this.setState(prevState => ({\n        touched: setIn(prevState.touched, field, true),\n      }));\n\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    };\n\n    if (isString(eventOrString)) {\n      // cache these handlers by key like Preact's linkState does for perf boost\n      return isFunction(this.hbCache[eventOrString])\n        ? this.hbCache[eventOrString]\n        : (this.hbCache[eventOrString] = (event: any) =>\n            executeBlur(event, eventOrString));\n    } else {\n      executeBlur(eventOrString);\n    }\n  };\n\n  setFieldTouched = (\n    field: string,\n    touched: boolean = true,\n    shouldValidate: boolean = true\n  ) => {\n    // Set touched field by name\n    this.setState(\n      prevState => ({\n        ...prevState,\n        touched: setIn(prevState.touched, field, touched),\n      }),\n      () => {\n        if (this.props.validateOnBlur && shouldValidate) {\n          this.runValidations(this.state.values);\n        }\n      }\n    );\n  };\n\n  setFieldError = (field: string, message: string) => {\n    // Set form field by name\n    this.setState(prevState => ({\n      ...prevState,\n      errors: setIn(prevState.errors, field, message),\n    }));\n  };\n\n  resetForm = (nextValues?: Values) => {\n    const values = nextValues ? nextValues : this.props.initialValues;\n\n    this.initialValues = values;\n\n    this.setState({\n      isSubmitting: false,\n      errors: {},\n      touched: {},\n      error: undefined,\n      status: undefined,\n      values,\n      submitCount: 0,\n    });\n    Object.keys(this.fields).map(f => this.fields[f](values));\n  };\n\n  handleReset = () => {\n    if (this.props.onReset) {\n      const maybePromisedOnReset = (this.props.onReset as any)(\n        this.state.values,\n        this.getFormikActions()\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\n      } else {\n        this.resetForm();\n      }\n    } else {\n      this.resetForm();\n    }\n  };\n\n  setFormikState = (s: any, callback?: (() => void)) =>\n    this.setState(s, callback);\n\n  getFormikActions = (): FormikActions<Values> => {\n    return {\n      resetForm: this.resetForm,\n      submitForm: this.submitForm,\n      validateForm: this.runValidations,\n      setError: this.setError,\n      setErrors: this.setErrors,\n      setFieldError: this.setFieldError,\n      setFieldTouched: this.setFieldTouched,\n      setFieldValue: this.setFieldValue,\n      setStatus: this.setStatus,\n      setSubmitting: this.setSubmitting,\n      setTouched: this.setTouched,\n      setValues: this.setValues,\n      setFormikState: this.setFormikState,\n    };\n  };\n\n  getFormikComputedProps = () => {\n    const { isInitialValid } = this.props;\n    const dirty = !isEqual(this.initialValues, this.state.values);\n    return {\n      dirty,\n      isValid: dirty\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\n          : (isInitialValid as boolean),\n      initialValues: this.initialValues,\n    };\n  };\n\n  getFormikBag = () => {\n    return {\n      ...this.state,\n      ...this.getFormikActions(),\n      ...this.getFormikComputedProps(),\n\n      // FastField needs to communicate with Formik during resets\n      registerField: this.registerField,\n      unregisterField: this.unregisterField,\n      handleBlur: this.handleBlur,\n      handleChange: this.handleChange,\n      handleReset: this.handleReset,\n      handleSubmit: this.handleSubmit,\n      validateOnChange: this.props.validateOnChange,\n      validateOnBlur: this.props.validateOnBlur,\n    };\n  };\n\n  render() {\n    const { component, render, children } = this.props;\n    const props = this.getFormikBag();\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.error(\n    `Warning: \\`${handlerName}\\` has triggered and you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n\n    ${htmlContent}\n\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n","import * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { FormikProps } from './Formik';\nimport { getIn, isPromise, isFunction, isEmptyChildren } from './utils';\nimport warning from 'warning';\nimport { GenericFieldHTMLAttributes } from './types';\n\n/**\n * Note: These typings could be more restrictive, but then it would limit the\n * reusability of custom <Field/> components.\n *\n * @example\n * interface MyProps {\n *   ...\n * }\n *\n * export const MyInput: React.SFC<MyProps & FieldProps> = ({\n *   field,\n *   form,\n *   ...props\n * }) =>\n *   <div>\n *     <input {...field} {...props}/>\n *     {form.touched[field.name] && form.errors[field.name]}\n *   </div>\n */\nexport interface FieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: (e: React.ChangeEvent<any>) => void;\n    /** Mark input as touched */\n    onBlur: (e: any) => void;\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Function | Promise<void> | undefined);\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes = GenericFieldHTMLAttributes & FieldConfig;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\n\nexport class Field<Props extends FieldAttributes = any> extends React.Component<\n  Props,\n  {}\n> {\n  static contextTypes = {\n    formik: PropTypes.object,\n  };\n\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    component: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    render: PropTypes.func,\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    validate: PropTypes.func,\n    innerRef: PropTypes.func,\n  };\n\n  componentWillMount() {\n    const { render, children, component } = this.props;\n\n    warning(\n      !(component && render),\n      'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored'\n    );\n\n    warning(\n      !(this.props.component && children && isFunction(children)),\n      'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n    );\n  }\n\n  handleChange = (e: React.ChangeEvent<any>) => {\n    const { handleChange, validateOnChange } = this.context.formik;\n    handleChange(e); // Call Formik's handleChange no matter what\n    if (!!validateOnChange && !!this.props.validate) {\n      this.runFieldValidations(e.target.value);\n    }\n  };\n\n  handleBlur = (e: any) => {\n    const { handleBlur, validateOnBlur } = this.context.formik;\n    handleBlur(e); // Call Formik's handleBlur no matter what\n    if (validateOnBlur && this.props.validate) {\n      this.runFieldValidations(e.target.value);\n    }\n  };\n\n  runFieldValidations = (value: any) => {\n    const { setFieldError } = this.context.formik;\n    const { name, validate } = this.props;\n    // Call validate fn\n    const maybePromise = (validate as any)(value);\n    // Check if validate it returns a Promise\n    if (isPromise(maybePromise)) {\n      (maybePromise as Promise<any>).then(\n        () => setFieldError(name, undefined),\n        error => setFieldError(name, error)\n      );\n    } else {\n      // Otherwise set the error\n      setFieldError(name, maybePromise);\n    }\n  };\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      ...props\n    } = this.props as FieldConfig;\n\n    const { formik } = this.context;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: validate ? this.handleChange : formik.handleChange,\n      onBlur: validate ? this.handleBlur : formik.handleBlur,\n    };\n    const bag = { field, form: formik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n","import * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nexport const Form: React.SFC<any> = (props, context) => (\n  <form onSubmit={context.formik.handleSubmit} {...props} />\n);\n\nForm.contextTypes = {\n  formik: PropTypes.object,\n};\n","import * as React from 'react';\n\nimport {\n  Formik,\n  FormikActions,\n  FormikComputedProps,\n  FormikHandlers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikState,\n  FormikValues,\n} from './Formik';\n\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n */\nexport type InjectedFormikProps<Props, Values> = Props &\n  FormikState<Values> &\n  FormikActions<Values> &\n  FormikHandlers &\n  FormikComputedProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikActions<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  Props,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: Props): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        val[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<Props, Values, Payload>): ComponentDecorator<\n  Props,\n  InjectedFormikProps<Props, Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<InjectedFormikProps<Props, Values>>\n  ): React.ComponentClass<Props> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<Props, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikActions<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        return (\n          <Formik\n            {...this.props as any}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics<Props, InjectedFormikProps<Props, Values>>(\n      C as any,\n      Component as React.ComponentClass<InjectedFormikProps<Props, Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<Props>;\n  };\n}\n","import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { FormikProps, FormikState } from './Formik';\nimport { isEmptyChildren, getIn, setIn, isFunction } from './utils';\nimport { SharedRenderProps } from './types';\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<ArrayHelpers & { form: FormikProps<any> }>;\n\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\n\nexport class FieldArray extends React.Component<FieldArrayConfig, {}> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n  static contextTypes = {\n    formik: PropTypes.object,\n  };\n\n  constructor(props: FieldArrayConfig) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this);\n    this.pop = this.pop.bind(this);\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean,\n    alterErrors: boolean\n  ) => {\n    const {\n      setFormikState,\n      validateForm,\n      values,\n      touched,\n      errors,\n    } = this.context.formik;\n    const { name, validateOnChange } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => ({\n        ...prevState,\n        values: setIn(prevState.values, name, fn(getIn(values, name))),\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fn(getIn(errors, name)))\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fn(getIn(touched, name)))\n          : prevState.touched,\n      }),\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), value],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      false,\n      false\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField(\n      (array: any[]) => move(array, from, to),\n      false,\n      false\n    );\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      false,\n      false\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let arr = [];\n    this.updateArrayField(\n      (array: any[]) => {\n        arr = array ? [value, ...array] : [value];\n        return arr;\n      },\n      false,\n      false\n    );\n    return arr.length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const { component, render, children, name } = this.props;\n    const props = { ...arrayHelpers, form: this.context.formik, name };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n","import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { validateYupSchema, yupToFormErrors, FormikProps } from './Formik';\nimport { getIn, isPromise, setIn, isFunction, isEmptyChildren } from './utils';\nimport warning from 'warning';\nimport { FieldAttributes, FieldConfig, FieldProps } from './Field';\nimport isEqual from 'react-fast-compare';\n\nexport interface FastFieldState {\n  value: any;\n  error?: string;\n}\n\n/** @private Returns whether two objects are deeply equal **excluding** a key / dot path */\nfunction isEqualExceptForKey(a: any, b: any, path: string) {\n  return isEqual(setIn(a, path, undefined), setIn(b, path, undefined));\n}\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nexport class FastField<\n  Props extends FieldAttributes = any\n> extends React.Component<Props, FastFieldState> {\n  static contextTypes = {\n    formik: PropTypes.object,\n  };\n\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    component: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    render: PropTypes.func,\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    validate: PropTypes.func,\n    innerRef: PropTypes.func,\n  };\n\n  reset: Function;\n  constructor(props: Props, context: any) {\n    super(props);\n    this.state = {\n      value: getIn(context.formik.values, props.name),\n      error: getIn(context.formik.errors, props.name),\n    };\n\n    this.reset = (nextValues?: any) => {\n      this.setState({\n        value: getIn(nextValues, props.name),\n        error: getIn(context.formik.errors, props.name),\n      });\n    };\n\n    context.formik.registerField(props.name, this.reset);\n  }\n\n  componentWillReceiveProps(\n    nextProps: Props,\n    nextContext: { formik: FormikProps<any> }\n  ) {\n    const nextFieldValue = getIn(nextContext.formik.values, nextProps.name);\n    const nextFieldError = getIn(nextContext.formik.errors, nextProps.name);\n\n    let nextState: any;\n\n    if (nextFieldValue !== this.state.value) {\n      nextState = { value: nextFieldValue };\n    }\n\n    if (nextFieldError !== this.state.error) {\n      nextState = { ...nextState, error: nextFieldError };\n    }\n\n    if (nextState) {\n      this.setState(s => ({ ...s, ...nextState }));\n    }\n  }\n\n  componentWillUnmount() {\n    this.context.formik.unregisterField(this.props.name);\n  }\n\n  componentWillMount() {\n    const { render, children, component } = this.props;\n\n    warning(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    warning(\n      !(this.props.component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  handleChange = (e: React.ChangeEvent<any>) => {\n    e.persist();\n    const {\n      validateOnChange,\n      validate,\n      values,\n      validationSchema,\n      errors,\n      setFormikState,\n    } = this.context.formik;\n    const { type, value, checked } = e.target;\n    const val = /number|range/.test(type)\n      ? parseFloat(value)\n      : /checkbox/.test(type) ? checked : value;\n    if (validateOnChange) {\n      // Field-level validation\n      if (this.props.validate) {\n        const maybePromise = (this.props.validate as any)(value);\n        if (isPromise(maybePromise)) {\n          this.setState({ value: val });\n          (maybePromise as any).then(\n            () => this.setState({ error: undefined }),\n            (error: string) => this.setState({ error })\n          );\n        } else {\n          this.setState({ value: val, error: maybePromise });\n        }\n      } else if (validate) {\n        // Top-level validate\n        const maybePromise = (validate as any)(\n          setIn(values, this.props.name, val)\n        );\n\n        if (isPromise(maybePromise)) {\n          this.setState({ value: val });\n          (maybePromise as any).then(\n            () => this.setState({ error: undefined }),\n            (error: any) => {\n              // Here we diff the errors object relative to Formik parents except for\n              // the Field's key. If they are equal, the field's validation function is\n              // has no inter-field side-effects and we only need to update local state\n              // otherwise we need to lift up the update to the parent (causing a full form render)\n              if (isEqualExceptForKey(maybePromise, errors, this.props.name)) {\n                this.setState({ error: getIn(error, this.props.name) });\n              } else {\n                setFormikState((prevState: any) => ({\n                  ...prevState,\n                  errors: error,\n                  // touched: setIn(prevState.touched, name, true),\n                }));\n              }\n            }\n          );\n        } else {\n          // Handle the same diff situation\n          // @todo refactor\n          if (isEqualExceptForKey(maybePromise, errors, this.props.name)) {\n            this.setState({\n              value: val,\n              error: getIn(maybePromise, this.props.name),\n            });\n          } else {\n            this.setState({\n              value: val,\n            });\n            setFormikState((prevState: any) => ({\n              ...prevState,\n              errors: maybePromise,\n            }));\n          }\n        }\n      } else if (validationSchema) {\n        // Top-level validationsSchema\n        const schema = isFunction(validationSchema)\n          ? validationSchema()\n          : validationSchema;\n        const mergedValues = setIn(values, this.props.name, val);\n        // try to validate with yup synchronously if possible...saves a render.\n        try {\n          validateYupSchema(mergedValues, schema, true);\n          this.setState({\n            value: val,\n            error: undefined,\n          });\n        } catch (e) {\n          if (e.name === 'ValidationError') {\n            this.setState({\n              value: val,\n              error: getIn(yupToFormErrors(e), this.props.name),\n            });\n          } else {\n            this.setState({\n              value: val,\n            });\n            // try yup async validation\n            validateYupSchema(mergedValues, schema).then(\n              () => this.setState({ error: undefined }),\n              (err: any) =>\n                this.setState(s => ({\n                  ...s,\n                  error: getIn(yupToFormErrors(err), this.props.name),\n                }))\n            );\n          }\n        }\n      } else {\n        this.setState({ value: val });\n      }\n    } else {\n      this.setState({ value: val });\n    }\n  };\n\n  handleBlur = () => {\n    const { validateOnBlur, setFormikState } = this.context.formik;\n    const { name, validate } = this.props;\n\n    // @todo refactor\n    if (validateOnBlur && validate) {\n      const maybePromise = (validate as any)(this.state.value);\n      if (isPromise(maybePromise)) {\n        (maybePromise as Promise<any>).then(\n          () =>\n            setFormikState((prevState: any) => ({\n              ...prevState,\n              values: setIn(prevState.values, name, this.state.value),\n              errors: setIn(prevState.errors, name, undefined),\n              touched: setIn(prevState.touched, name, true),\n            })),\n          error =>\n            setFormikState((prevState: any) => ({\n              ...prevState,\n              values: setIn(prevState.values, name, this.state.value),\n              errors: setIn(prevState.errors, name, error),\n              touched: setIn(prevState.touched, name, true),\n            }))\n        );\n      } else {\n        setFormikState((prevState: any) => ({\n          ...prevState,\n          values: setIn(prevState.values, name, this.state.value),\n          errors: setIn(prevState.errors, name, maybePromise),\n          touched: setIn(prevState.touched, name, true),\n        }));\n      }\n    } else {\n      setFormikState((prevState: any) => ({\n        ...prevState,\n        errors: setIn(prevState.errors, name, this.state.error),\n        values: setIn(prevState.values, name, this.state.value),\n        touched: setIn(prevState.touched, name, true),\n      }));\n    }\n  };\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      ...props\n    } = this.props as FieldConfig;\n\n    const { formik } = this.context;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : this.state.value,\n      name,\n      onChange: this.handleChange,\n      onBlur: this.handleBlur,\n    };\n    const bag = {\n      field,\n      form: formik,\n      meta: { touched: getIn(formik.touched, name), error: this.state.error },\n    };\n\n    if (render) {\n      return (render as (\n        props: FieldProps<any> & {\n          meta: { error?: string; touched?: boolean };\n        }\n      ) => React.ReactNode)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n"],"names":["React.Children","tslib_1.__extends","React.createElement","PropTypes.bool","PropTypes.oneOfType","PropTypes.func","PropTypes.object","PropTypes.node","React.Component","PropTypes.string"],"mappings":"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"}